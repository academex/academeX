generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// MODELS
model User {
  id                        Int       @id @default(autoincrement())
  username                  String    @unique
  firstName                 String    @map("first_name")
  lastName                  String?   @map("last_name")
  email                     String    @unique
  role                      Role      @default(STUDENT)
  password                  String
  resetPasswordToken        String?   @unique @map("reset_password_token")
  resetPasswordTokenExpires DateTime? @default(now()) @map("reset_password_token_expires")
  photoUrl                  String?   @map("photo_url")
  bio                       String?   @db.Text
  currentYear               Int       @map("current_year")
  gender                    Gender    @default(MALE)
  phoneNum                  String    @map("phone_num")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @default(now()) @updatedAt @map("updated_at")
  isActive                  Boolean   @default(true)

  // Relations
  tag       Tag         @relation(fields: [tagId], references: [id])
  tagId     Int         @map("tag_id")
  posts     Post[]
  comments  Comment[]
  replies   Reply[]
  reactions Reaction[]
  SavedPost SavedPost[]
  // @@unique([email, username]) // Compound unique constraint

  @@index([email])
  @@index([username])
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  // slug        String   @unique
  collegeAr   String   @map("college_ar")
  majorAr     String   @map("major_ar")
  collegeEn   String   @map("college_en")
  majorEn     String   @map("major_en")
  description String?
  yearsNum    Int      @map("years_num")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  users User[]
  posts Post[]
  // @@index([slug])

  @@index([collegeEn])
  @@index([collegeAr])
}

model Post {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  // likes       Int?     @default(0)
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  fileUrl     String?  @map("file_url")
  fileName    String?  @map("file_name")

  // Relations
  tags        Tag[]
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @map("user_id")
  // file        Library?      @relation(fields: [fileId], references: [id])
  // fileId      Int?          @map("file_id")
  postUploads PostUploads[]
  comments    Comment[]
  reactions   Reaction[]
  SavedPost   SavedPost[]

  @@index([userId])
}

model SavedPost {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")

  @@unique([userId, postId])
  @@index([userId])
  @@map("saved_posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  likes     Int?     @default(0)
  isHidden  Boolean  @default(false) @map("is_hidden")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @map("user_id")
  post    Post    @relation(fields: [postId], references: [id])
  postId  Int     @map("post_id")
  replies Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  likes     Int?     @default(0)
  isHidden  Boolean  @default(false) @map("is_hidden")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @map("comment_id")
  // ref to the parent reply, 
  parent    Reply?  @relation("ReplyToParent", fields: [parentId], references: [id])
  parentId  Int?    @map("parent_id")
  children  Reply[] @relation("ReplyToParent")
}

model Reaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at")

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
  @@index([postId])
}

model Library {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  url         String   @map("file_url")
  name        String   @map("file_name")
  size        Int      @map("file_size")
  mimeType    String   @map("mime_type")
  stars       Int?     @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  // post Post[]
}

model PostUploads {
  id        Int      @id @default(autoincrement())
  url       String   @map("image_url")
  name      String   @map("file_name")
  size      Int      @map("file_size")
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")

  @@index([postId])
  @@map("Post_Uploads")
}

// ENUMS
enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum ReactionType {
  HEART
  CLAPPING
  FUNNY
  CELEBRATE
  QUESTION
  INSIGHTFUL
  LIKE
}
