// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   directUrl = env("DATABASE_URL_UNPOOLED")
}

// MODELS
model User {
  id                        Int        @id @default(autoincrement())
  username                  String     @unique
  firstName                 String     @map("first_name")
  lastName                  String?    @map("last_name")
  email                     String
  role                      Role       @default(STUDENT)
  password                  String
  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?  @default(now())
  photoUrl                  String?    @map("photo_url")
  bio                       String?
  currentYear               Int        @map("current_year")
  gender                    Gender     @default(MALE)
  phoneNum                  String     @map("phone_num")
  tag                       Tag        @relation(fields: [tagId], references: [id])
  tagId                     Int        @map("tag_id")
  createdAt                 DateTime   @default(now()) @map("created_at")
  updatedA                  DateTime   @default(now()) @updatedAt @map("updated_at")
  posts                     Post[]
  comments                  Comment[]
  replies                   Reply[]
  reactions                 Reaction[]

  // @@unique([email, username]) // Compound unique constraint
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  college     String
  major       String
  description String?
  yearsNum    Int      @map("years_num")
  users       User[]
  posts       Post[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedA    DateTime @default(now()) @updatedAt @map("updated_at")
}

model Post {
  id          Int           @id @default(autoincrement())
  content     String
  likes       Int?          @default(0)
  tags        Tag[]
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @map("user_id")
  file        Library?      @relation(fields: [fileId], references: [id])
  fileId      Int?          @map("file_id")
  postUploads PostUploads[]
  comments    Comment[]
  reactions   Reaction[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedA    DateTime      @default(now()) @updatedAt @map("updated_at")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  likes     Int?     @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
  replies   Reply[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedA  DateTime @default(now()) @updatedAt @map("updated_at")
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  likes     Int?     @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int      @map("comment_id")
  // ref to the parent reply, 
  parent    Reply?   @relation("ReplyToParent", fields: [parentId], references: [id])
  parentId  Int?     @map("parent_id")
  children  Reply[]  @relation("ReplyToParent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedA  DateTime @default(now()) @updatedAt @map("updated_at")
}

model Reaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  post      Post         @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime     @default(now())

  @@unique([userId, postId]) 
}

model Library {
  id          Int      @id @default(autoincrement())
  description String
  fileUrl     String   @map("file_url")
  stars       Int
  post        Post[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedA    DateTime @default(now()) @updatedAt @map("updated_at")
}

model PostUploads {
  id     Int    @id @default(autoincrement())
  url    String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int    @map("post_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedA  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("Post_Uploads")
}

// ENUMS
enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum ReactionType {
  HEART
  CLAPPING
  FUNNY
}
